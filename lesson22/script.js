/*__________________________________________________________ */
//JavaScript событийный цикл Event Loop, асинхронный код, промисы (Promise), async / await



/*__________________________________________________________ */
// const wait = (ms, callback) => {
//   const now = new Date().getTime()

//   while (new Date().getTime() < now + ms) {
//     /*Ничего не делаем*/
//   }

//   callback()
// }



// console.log(1)
// wait(5000, () => console.log(2))//Выведется спустя 5 секунд, синхронная функция
// console.log(3)
/*__________________________________________________________ */

// const wait = (ms, callback) => {
//  setTimeout(callback, ms)
// }



// console.log(1)
// wait(5000, () => console.log(2))//Выведется спустя 5 секунд, после 3. Работает ассинхронно
// console.log(3)

/*__________________________________________________________ */

// console.log('Начинаем загрузку данных...');

// setTimeout(() => {
//   console.log('1️⃣ Получили пользователя из базы');

//   setTimeout(() => {
//     console.log('2️⃣ Получили список заказов этого пользователя');

//     setTimeout(() => {
//       console.log('3️⃣ Получили детали по первому заказу');

//       setTimeout(() => {
//         console.log('4️⃣ Отправили заказ пользователю');
//       }, 1000);

//     }, 1000);

//   }, 1000);

// }, 1000);

//Что тут происходит:

// Через 1 секунду получаем “пользователя из базы”.
// Потом ещё через 1 секунду — “его заказы”.
// Потом ещё через 1 секунду — “детали первого заказа”.
// Потом ещё через 1 секунду — “отправляем заказ”.
// Каждый шаг вложен в предыдущий —
// в итоге код становится лесенкой, нечитаемым и сложным для поддержки

// const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// async function processOrder() {
//   console.log('Начинаем загрузку данных...');

//   await wait(1000);
//   console.log('1️⃣ Получили пользователя из базы');

//   await wait(1000);
//   console.log('2️⃣ Получили список заказов');

//   await wait(1000);
//   console.log('3️⃣ Получили детали по первому заказу');

//   await wait(1000);
//   console.log('4️⃣ Отправили заказ пользователю');
// }

// processOrder();


/*__________________________________________________________ */

//Promise - специальный объект-надстройка для работы 
//с асинхронным кодом


/* Promise Имеет 3 состояния:
1. pending - ожидание, исходное состояние
2. fulfilled - выполнено успешно, получен результат
3. rejected - выполнено с ошибкой
*/

/*
Методы Promise:
then() - обрабатывает fulfilled состояние
catch() обрабатывает rejected состояние
 */
/*__________________________________________________________ */

// const promise = new Promise((fulfil, reject) => {
//   console.log('Начало, состояние pending...')

//   setTimeout(() => {
//     if (Math.random() > 0.5) {
//       fulfil('Ура, состояние fulfilled =)')

//     } else{
//       reject('Увы, состояние rejected =(')
//     }
//   }, 3000)
// })

// promise
// .then((successData) => {
//   console.log('Успех! Полученные данные:', successData)
// })
// .catch((errorData) => {
//   console.log('Ошибка. Полученные данные:', errorData)
// })
// .finally(() => {
//   console.log('Код, выполняющийся в самом конце, независимо от результата')
// })



/*__________________________________________________________ */

const promise = new Promise((fulfil, reject) => {
  console.log('Начало, состояние pending...')

  setTimeout(() => {
    if (Math.random() > 0.5) {
      fulfil('Ура, состояние fulfilled =)')

    } else{
      reject('Увы, состояние rejected =(')
    }
  }, 3000)
})

promise
.then((successData) => {
  console.log('Успех! Полученные данные:', successData)
},
(errorData) => {
  console.log('Ошибка. Получены данные:', errorData)
}
)
.finally(() => {
  console.log('Код, выполняющийся в самом конце, независимо от результата')
})

/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */