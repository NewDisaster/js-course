/*__________________________________________________________ */
//Методы массивов JavaScript — forEach, map, filter, reduce, some, every, sort, includes, indexOf.






/*__________________________________________________________ */

// const data = ['Макс', 27]

// const [name, age] = data //Деструктуризация
// console.log('name:', name)
// console.log('age', age)
// /*__________________________________________________________ */

// const letters = [1, 2, 4, 5 , 4]

// letters.forEach((element, index, array) => {
//   console.log(element)
// }) // Вывод элементов массива

// console.log(letters.indexOf(4)) // Выводим индекс элемента (при повторах - первый индекс)
//console.log(letters.indexOf(4, 3))// Второй аргумент - с какого индекса смотрим

// const users = [
//   {
//     name: 'Макс',
//     age: 27,
//   },
//   {
//     name: 'Саня',
//     age: 27,
//   },
//   {
//     name: 'Владислав',
//     age: 400,
//   },
// ]

// console.log(users.findIndex( (user) => user.name === 'Владислав'))




/*____________________________________

______________________ */


/*__________________________________________________________ */

//const letters = [1, 2, 4, 5 , 4]

//console.log(letters.includes(2)) //Проверка, есть ли элемент в массиве

// const users = [
//   {
//     name: 'Макс',
//     age: 27,
//     city: 'Москва', 
//   },
//   {
//     name: 'Саня',
//     age: 27,
//     city: 'Нижний Новгород',
//   },
//   {
//     name: 'Владислав',
//     age: 400,
//     city: 'Санкт-Петербург',
//   },
//    {
//     name: 'Владислав',
//     age: 25,
//     city: 'Москва',
//   },
// ]

// console.log(
//   users.some((user) => user.name === 'Владислав') //проверка, если структура сложная
// )

// console.log(
//   users.every((user) => user.age >= 18) //Проверка, все ли Age в массиве >= 18
// )

// console.log(
//   users.find((user) => user.name === 'Владислав') //Найдет первого 
// )

// console.log(
//   users.filter((user) => user.name === 'Владислав') //Найдет всех 
// )

// const filterUsers = users.filter((user) =>{
//   return user.city === 'Москва' || user.age < 45
// })

// console.log(filterUsers)

// const usersFormatted = users.map((user) =>{
//   return `${user.name}, ${user.age} лет, живет в г. ${user.city}`
// })

// console.log(usersFormatted)


/*__________________________________________________________ */

// const users = [
//   {
//     name: 'Макс',
//     age: 27,
//     city: 'Москва', 
//   },
//   {
//     name: 'Саня',
//     age: 27,
//     city: 'Нижний Новгород',
//   },
//   {
//     name: 'Владислав',
//     age: 400,
//     city: 'Санкт-Петербург',
//   },
//    {
//     name: 'Владислав',
//     age: 25,
//     city: 'Москва',
//   },
// ]

// const ageSum = users.reduce((sumAge, user, index, array) => {  //sumAge = Текущее значение функции
//   return sumAge + user.age
// }, 0) //0 - начальное значение

// console.log('Средний возраст пользователей:', ageSum /users.length )
/*__________________________________________________________ */



/*__________________________________________________________ */

// array.reduce((accumulator, currentValue, index, array) => {
//   // тело функции
// }, initialValue)
// Параметр	Что это
// accumulator	накопленное значение (то, что «собираем»)
// currentValue	текущий элемент массива
// index	индекс текущего элемента (необязательно)
// array	сам массив (необязательно)
// initialValue	начальное значение аккумулятора (рекомендуется всегда указывать)

/*__________________________________________________________ */

// const numbers = [1, 2, 3, 4]

// const sum = numbers.reduce((acc, num) => {
//   return acc + num
// }, 0)

// console.log(sum) // 10

//

/*__________________________________________________________ */

// const numbers = [1, 2, 3, 4, 5]
// numbers.reverse()

// console.log(numbers) // [5, 4, 3, 2, 1]. !!!Меняет исходную переменную.

/*__________________________________________________________ */

// const numbers = [2, 10, 4, 30]
// numbers.sort()
// console.log(numbers) // [10, 2, 30, 4] ❌ — не по числам!по строкам


const numbers = [2, 10, 4, 30]
numbers.sort((a, b) => a - b)
console.log(numbers) // [2, 4, 10, 30]

/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */



/*__________________________________________________________ */